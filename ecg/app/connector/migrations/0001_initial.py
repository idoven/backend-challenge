# Generated by Django 3.2.23 on 2024-01-29 00:26

import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ECGModel',
            fields=[
                (
                    'id',
                    models.AutoField(
                        help_text='A unique identifier for each ECG',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'date',
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text='The date of creation',
                    ),
                ),
                ('leads', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'password',
                    models.CharField(
                        max_length=128,
                        verbose_name='password',
                    ),
                ),
                (
                    'last_login',
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name='last login',
                    ),
                ),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all'
                        ' permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'first_name',
                    models.CharField(
                        blank=True,
                        max_length=150,
                        verbose_name='first name',
                    ),
                ),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates '
                        'whether the user'
                        ' can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user'
                        ' should be treated as active. '
                        'Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                (
                    'date_joined',
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name='date joined',
                    ),
                ),
                ('is_admin', models.BooleanField(default=False)),
                (
                    'username',
                    models.CharField(
                        error_messages={
                            'unique': 'A user with that username already exists.'  # noqa: E501
                        },
                        help_text='unique identifier of the user',
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message='Username must contain'
                                ' only alphanumeric characters.',
                                regex='^[a-zA-Z0-9_-]+$',
                            )
                        ],
                    ),
                ),
                ('name', models.CharField(max_length=20)),
                ('last_name', models.CharField(max_length=50)),
                (
                    'second_last_name',
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                    ),
                ),
                ('email', models.EmailField(max_length=254, unique=True)),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to.'
                        ' A user will get all permissions'
                        ' granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
